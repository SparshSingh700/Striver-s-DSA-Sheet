//Leetcode 148. Sort List.
class Solution {

    public ListNode sortList(ListNode head) {
        return mergeSort(head);
    }

    //merge sort
    private ListNode mergeSort(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode middle = findMiddle(head);
        ListNode right = middle.next;
        middle.next = null; // break into two 

        ListNode left = mergeSort(head);
        right = mergeSort(right);

        return sortedList(left, right);
    }

    // Find middle 
    private ListNode findMiddle(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode slow = head;
        ListNode fast = head.next;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }

    // Merge 
    private ListNode sortedList(ListNode left, ListNode right) {
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;

        while (left != null && right != null) {
            if (left.val < right.val) {
                tail.next = left;
                left = left.next;
            } else {
                tail.next = right;
                right = right.next;
            }
            tail = tail.next;
        }

        if (left != null) tail.next = left;
        if (right != null) tail.next = right;

        return dummy.next;
    }
}
